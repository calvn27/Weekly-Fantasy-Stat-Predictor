
---
title: "Weekly Stat Predictor"
output: pdf_document
date: "2023-10-21"
---

```{r}
library(tidyverse)
library(ggrepel)
library(nflreadr)
library(nflplotR)
library(stringr)
```

```{r}
options(scipen = 9999)
```

```{r}
pbp_stats <- load_player_stats(2020:2022)

def_stats <- load_pbp(2020:2022)

pbp_stats_test <- load_player_stats(2023)

def_stats_test <- load_pbp(2023)

```

```{r}
def_stats_allowed <- def_stats %>%
  filter(!is.na(posteam)) %>%
  select(game_id, season, week, posteam, defteam, passing_yards, rushing_yards, success, rush_touchdown, pass_touchdown, interception, fumble_lost, sack) %>%
  replace(is.na(.), 0) %>%
  group_by(game_id, season, week, posteam, defteam) %>%
  summarize(total_rushing_yards_allowed = sum(rushing_yards), success_rate_against = mean(success), total_rush_tds_allowed = sum(rush_touchdown), total_passing_yards_allowed = sum(passing_yards), total_pass_tds_allowed = sum(pass_touchdown), interceptions_forced = sum(interception), fumbles_forced = sum(fumble_lost), sacks_forced = sum(sack)) %>%
  ungroup()



def_stats_allowed_test <- def_stats_test %>%
  filter(!is.na(posteam)) %>%
  select(game_id, season, week, posteam, defteam, passing_yards, rushing_yards, success, rush_touchdown, pass_touchdown, interception, fumble_lost, sack) %>%
  replace(is.na(.), 0) %>%
  group_by(game_id, season, week, posteam, defteam) %>%
  summarize(total_rushing_yards_allowed = sum(rushing_yards), success_rate_against = mean(success), total_rush_tds_allowed = sum(rush_touchdown), total_passing_yards_allowed = sum(passing_yards), total_pass_tds_allowed = sum(pass_touchdown), interceptions_forced = sum(interception), fumbles_forced = sum(fumble_lost), sacks_forced = sum(sack)) %>%
  ungroup()
  

```



```{r}
weekly_stats <- pbp_stats %>%
  select(-c(headshot_url, pacr, dakota, racr, opponent_team, position_group)) %>%
  replace(is.na(.), 0) %>%
  mutate(fan_points_half_ppr = (.04*passing_yards) + (4* passing_tds) + (-2*interceptions) + (2*passing_2pt_conversions) + (.1*rushing_yards) + (6*rushing_tds) + (-2*rushing_fumbles_lost) + (2*rushing_2pt_conversions) + (.1*receiving_yards) + (.5*receptions) + (6*receiving_tds) + (-2*receiving_fumbles_lost) + (2*receiving_2pt_conversions) + (-2*sack_fumbles_lost), posteam = recent_team) %>%
  select(-c(recent_team))


weekly_stats_test <- pbp_stats_test %>%
  select(-c(headshot_url, pacr, dakota, racr, opponent_team, position_group)) %>%
  replace(is.na(.), 0) %>%
  mutate(fan_points_half_ppr = (.04*passing_yards) + (4* passing_tds) + (-2*interceptions) + (2*passing_2pt_conversions) + (.1*rushing_yards) + (6*rushing_tds) + (-2*rushing_fumbles_lost) + (2*rushing_2pt_conversions) + (.1*receiving_yards) + (.5*receptions) + (6*receiving_tds) + (-2*receiving_fumbles_lost) + (2*receiving_2pt_conversions) + (-2*sack_fumbles_lost), posteam = recent_team) %>%
  select(-c(recent_team))
  
  
```


```{r}
positions <- c("QB", "RB", "WR", "TE")


merged_stats <- left_join(weekly_stats, def_stats_allowed, by =c("season", "week", "posteam")) %>%
  filter(position %in% positions) %>%
  select(-c( player_display_name, season, season_type, wopr, special_teams_tds))



merged_stats_test <- left_join(weekly_stats_test, def_stats_allowed_test, by =c("season", "week", "posteam")) %>%
  filter(position %in% positions) %>%
  select(-c( player_display_name, season, season_type, wopr, special_teams_tds))


```


## Chang Week here ###

```{r, warning=FALSE}
weekly_stats_test_QB <- weekly_stats_test %>%
  filter(position == "QB", week < 9) %>%
  mutate(player_team = posteam) %>%
  group_by(player_id,, player_name, posteam, player_team, position) %>%
  summarise(completions = mean(completions), attempts = mean(attempts), passing_yards = mean(passing_yards), passing_tds = mean(passing_tds), interceptions = mean(interceptions), sacks = mean(sacks), sack_yards = mean(sack_yards), sack_fumbles = mean(sack_fumbles), sack_fumbles_lost = mean(sack_fumbles_lost), 
            passing_air_yards = mean(passing_air_yards), passing_yards_after_catch = mean(passing_yards_after_catch), passing_first_downs = mean(passing_first_downs), passing_epa = mean(passing_epa), passing_2pt_conversions = mean(passing_2pt_conversions), 
            carries = mean(carries), rushing_yards = mean(rushing_yards), rushing_tds = mean(rushing_tds), rushing_fumbles = mean(rushing_fumbles), rushing_fumbles_lost = mean(rushing_fumbles_lost), rushing_first_downs = mean(rushing_first_downs), rushing_epa = mean(rushing_epa), rushing_2pt_conversions = mean(rushing_2pt_conversions), 
            receptions = mean(receptions), targets = mean(targets), receiving_yards = mean(receiving_yards), receiving_tds = mean(receiving_tds), receiving_fumbles = mean(receiving_fumbles), receiving_fumbles_lost = mean(receiving_fumbles_lost), receiving_air_yards = mean(receiving_air_yards), receiving_yards_after_catch = mean(receiving_yards_after_catch), receiving_first_downs = mean(receiving_first_downs), receiving_epa = mean(receiving_epa), target_share = mean(target_share), air_yards_share = mean(air_yards_share), receiving_2pt_conversions = mean(receiving_2pt_conversions)) %>%
  ungroup() %>%
  distinct()




weekly_stats_test_RB <- weekly_stats_test %>%
  filter(position == "RB", week < 9) %>%
  mutate(player_team = posteam) %>%
  group_by(player_id, , player_name, posteam, player_team, position) %>%
  summarise(completions = mean(completions), attempts = mean(attempts), passing_yards = mean(passing_yards), passing_tds = mean(passing_tds), interceptions = mean(interceptions), sacks = mean(sacks), sack_yards = mean(sack_yards), sack_fumbles = mean(sack_fumbles), sack_fumbles_lost = mean(sack_fumbles_lost), passing_air_yards = mean(passing_air_yards), passing_yards_after_catch = mean(passing_yards_after_catch), passing_first_downs = mean(passing_first_downs), passing_epa = mean(passing_epa), passing_2pt_conversions = mean(passing_2pt_conversions), 
            carries = mean(carries), rushing_yards = mean(rushing_yards), rushing_tds = mean(rushing_tds), rushing_fumbles = mean(rushing_fumbles), rushing_fumbles_lost = mean(rushing_fumbles_lost), rushing_first_downs = mean(rushing_first_downs), rushing_epa = mean(rushing_epa), rushing_2pt_conversions = mean(rushing_2pt_conversions), 
            receptions = mean(receptions), targets = mean(targets), receiving_yards = mean(receiving_yards), receiving_tds = mean(receiving_tds), receiving_fumbles = mean(receiving_fumbles), receiving_fumbles_lost = mean(receiving_fumbles_lost), receiving_air_yards = mean(receiving_air_yards), receiving_yards_after_catch = mean(receiving_yards_after_catch), receiving_first_downs = mean(receiving_first_downs), receiving_epa = mean(receiving_epa), target_share = mean(target_share), air_yards_share = mean(air_yards_share), receiving_2pt_conversions = mean(receiving_2pt_conversions)) %>%
  ungroup() %>%
  distinct()





weekly_stats_test_WR <- weekly_stats_test %>%
  filter(position == "WR", week < 9) %>%
  mutate(player_team = posteam) %>%
  group_by(player_id,player_name, posteam, player_team, position) %>%
  summarise(completions = mean(completions), attempts = mean(attempts), passing_yards = mean(passing_yards), passing_tds = mean(passing_tds), interceptions = mean(interceptions), sacks = mean(sacks), sack_yards = mean(sack_yards), sack_fumbles = mean(sack_fumbles), sack_fumbles_lost = mean(sack_fumbles_lost), passing_air_yards = mean(passing_air_yards), passing_yards_after_catch = mean(passing_yards_after_catch), passing_first_downs = mean(passing_first_downs), passing_epa = mean(passing_epa), passing_2pt_conversions = mean(passing_2pt_conversions), 
            carries = mean(carries), rushing_yards = mean(rushing_yards), rushing_tds = mean(rushing_tds), rushing_fumbles = mean(rushing_fumbles), rushing_fumbles_lost = mean(rushing_fumbles_lost), rushing_first_downs = mean(rushing_first_downs), rushing_epa = mean(rushing_epa), rushing_2pt_conversions = mean(rushing_2pt_conversions), 
            receptions = mean(receptions), targets = mean(targets), receiving_yards = mean(receiving_yards), receiving_tds = mean(receiving_tds), receiving_fumbles = mean(receiving_fumbles), receiving_fumbles_lost = mean(receiving_fumbles_lost), receiving_air_yards = mean(receiving_air_yards), receiving_yards_after_catch = mean(receiving_yards_after_catch), receiving_first_downs = mean(receiving_first_downs), receiving_epa = mean(receiving_epa), target_share = mean(target_share), air_yards_share = mean(air_yards_share), receiving_2pt_conversions = mean(receiving_2pt_conversions)) %>%
  ungroup() %>%
  distinct()




weekly_stats_test_TE <- weekly_stats_test %>%
  filter(position == "TE", week < 9) %>%
  mutate(player_team = posteam) %>%
  group_by(player_id, player_name, posteam, player_team, position) %>%
  summarise(completions = mean(completions), attempts = mean(attempts), passing_yards = mean(passing_yards), passing_tds = mean(passing_tds), interceptions = mean(interceptions), sacks = mean(sacks), sack_yards = mean(sack_yards), sack_fumbles = mean(sack_fumbles), sack_fumbles_lost = mean(sack_fumbles_lost), passing_air_yards = mean(passing_air_yards), passing_yards_after_catch = mean(passing_yards_after_catch), passing_first_downs = mean(passing_first_downs), passing_epa = mean(passing_epa), passing_2pt_conversions = mean(passing_2pt_conversions), 
            carries = mean(carries), rushing_yards = mean(rushing_yards), rushing_tds = mean(rushing_tds), rushing_fumbles = mean(rushing_fumbles), rushing_fumbles_lost = mean(rushing_fumbles_lost), rushing_first_downs = mean(rushing_first_downs), rushing_epa = mean(rushing_epa), rushing_2pt_conversions = mean(rushing_2pt_conversions), 
            receptions = mean(receptions), targets = mean(targets), receiving_yards = mean(receiving_yards), receiving_tds = mean(receiving_tds), receiving_fumbles = mean(receiving_fumbles), receiving_fumbles_lost = mean(receiving_fumbles_lost), receiving_air_yards = mean(receiving_air_yards), receiving_yards_after_catch = mean(receiving_yards_after_catch), receiving_first_downs = mean(receiving_first_downs), receiving_epa = mean(receiving_epa), target_share = mean(target_share), air_yards_share = mean(air_yards_share), receiving_2pt_conversions = mean(receiving_2pt_conversions)) %>%
  ungroup() %>%
  distinct()

```

```{r}
def_stats_allowed_test <- def_stats_allowed_test %>%
  filter(week < 9) %>%
  group_by(defteam) %>%
  summarise(total_rushing_yards_allowed = mean(total_rushing_yards_allowed), total_rush_tds_allowed = mean(total_rush_tds_allowed), total_passing_yards_allowed = mean(total_passing_yards_allowed), total_pass_tds_allowed = mean(total_pass_tds_allowed), success_rate_against = mean(success_rate_against), interceptions_forced = mean(interceptions_forced), sacks_forced = mean(sacks_forced), fumbles_forced = mean(fumbles_forced)) %>%
  ungroup() %>%
  distinct()
```


```{r}
sched <- load_schedules(2023)

sched <- sched %>%
  filter(week == 9) %>%
  select(game_id, week, home_team, away_team)
```

```{r}

actual_QB <- weekly_stats_test %>%
  filter(position == "QB") %>%
  filter(week == 9) %>%
  select(player_id, player_name, posteam, position, fan_points_half_ppr)

actual_RB <- weekly_stats_test %>%
  filter(position == "RB") %>%
  filter(week == 9) %>%
  select(player_id, player_name, posteam, position, fan_points_half_ppr)

actual_WR <- weekly_stats_test %>%
  filter(position == "WR") %>%
  filter(week == 9) %>%
  select(player_id, player_name, posteam, position, fan_points_half_ppr)

actual_TE <- weekly_stats_test %>%
  filter(position == "TE") %>%
  filter(week == 9) %>%
  select(player_id, player_name, posteam, position, fan_points_half_ppr)
  
```


```{r}
result_home_QB <- sched %>%
  left_join(weekly_stats_test_QB, by = c("home_team" = "posteam")) 

# Join based on the player's team as the away team
result_away_QB <- sched %>%
  left_join(weekly_stats_test_QB, by = c("away_team" = "posteam")) 

final_result_QB <- bind_rows(result_home_QB, result_away_QB) %>%
  mutate(posteam = ifelse(player_team == home_team, home_team, ifelse(player_team == away_team, away_team, NA))) %>%
  mutate(defteam = ifelse(player_team == home_team, away_team, ifelse(player_team == away_team, home_team, NA))) %>%
  select(-home_team, -away_team, -game_id)


final_result_QB <- final_result_QB %>%
  left_join(def_stats_allowed_test, by = c("defteam" = "defteam"))

###################################################################

result_home_RB <- sched %>%
  left_join(weekly_stats_test_RB, by = c("home_team" = "posteam")) 

# Join based on the player's team as the away team
result_away_RB <- sched %>%
  left_join(weekly_stats_test_RB, by = c("away_team" = "posteam")) 

final_result_RB <- bind_rows(result_home_RB, result_away_RB) %>%
  mutate(posteam = ifelse(player_team == home_team, home_team, ifelse(player_team == away_team, away_team, NA))) %>%
  mutate(defteam = ifelse(player_team == home_team, away_team, ifelse(player_team == away_team, home_team, NA))) %>%
  select(-home_team, -away_team, -game_id)


final_result_RB <- final_result_RB %>%
  left_join(def_stats_allowed_test, by = c("defteam" = "defteam"))

###################################################################

result_home_WR <- sched %>%
  left_join(weekly_stats_test_WR, by = c("home_team" = "posteam")) 

# Join based on the player's team as the away team
result_away_WR <- sched %>%
  left_join(weekly_stats_test_WR, by = c("away_team" = "posteam")) 

final_result_WR <- bind_rows(result_home_WR, result_away_WR) %>%
  mutate(posteam = ifelse(player_team == home_team, home_team, ifelse(player_team == away_team, away_team, NA))) %>%
  mutate(defteam = ifelse(player_team == home_team, away_team, ifelse(player_team == away_team, home_team, NA))) %>%
  select(-home_team, -away_team, -game_id)


final_result_WR <- final_result_WR %>%
  left_join(def_stats_allowed_test, by = c("defteam" = "defteam"))


###################################################################

result_home_TE <- sched %>%
  left_join(weekly_stats_test_TE, by = c("home_team" = "posteam")) 

# Join based on the player's team as the away team
result_away_TE <- sched %>%
  left_join(weekly_stats_test_TE, by = c("away_team" = "posteam")) 

final_result_TE <- bind_rows(result_home_TE, result_away_TE) %>%
  mutate(posteam = ifelse(player_team == home_team, home_team, ifelse(player_team == away_team, away_team, NA))) %>%
  mutate(defteam = ifelse(player_team == home_team, away_team, ifelse(player_team == away_team, home_team, NA))) %>%
  select(-home_team, -away_team, -game_id)


final_result_TE <- final_result_TE %>%
  left_join(def_stats_allowed_test, by = c("defteam" = "defteam"))

```





```{r}
target_variables <- c(
  "passing_yards", "passing_tds", "interceptions", "sack_fumbles_lost",
  "passing_2pt_conversions", "rushing_yards", "rushing_tds", "rushing_fumbles_lost", "rushing_2pt_conversions", "receptions", "receiving_yards", "receiving_tds", "receiving_fumbles_lost", "receiving_2pt_conversions"
)

positions <- c("QB", "RB", "WR", "TE")

exclude_columns <- c("player_id", "player_name", "player_team", "position", "week", "fantasy_points", "fantasy_points_ppr", "fan_points_half_ppr", "posteam", "defteam")

selected_data <- merged_stats %>%
  select(-one_of(exclude_columns)) %>%
  select_if(function(col) is.factor(col) || is.numeric(col))

selected_data_QB <- merged_stats %>%
  filter(position == "QB") %>%
  select(-one_of(exclude_columns)) %>%
  select_if(function(col) is.factor(col) || is.numeric(col))

selected_data_RB <- merged_stats %>%
  filter(position == "RB") %>%
  select(-one_of(exclude_columns)) %>%
  select_if(function(col) is.factor(col) || is.numeric(col))

selected_data_WR <- merged_stats %>%
  filter(position == "WR") %>%
  select(-one_of(exclude_columns)) %>%
  select_if(function(col) is.factor(col) || is.numeric(col))

selected_data_TE <- merged_stats %>%
  filter(position == "TE") %>%
  select(-one_of(exclude_columns)) %>%
  select_if(function(col) is.factor(col) || is.numeric(col))




```




####################################
##QB


```{r, warning=FALSE}

QB_pred <- final_result_QB %>%
  select(player_id, player_name, player_team, position, defteam)

for (target_var in target_variables) {
  # Create a formula for the linear regression model
  formula <- as.formula(paste(target_var, "~ ."))
  
  # Perform forward stepwise regression on selected_data
  model <- lm(formula, data = selected_data_QB)
  
  # Make predictions for the target variable
  test_predictions <- predict(model, newdata = final_result_QB)

  # Create a new column in merged_preds with the name pred_target_var
  pred_column_name <- paste("pred", target_var, sep = "_")
  QB_pred[[pred_column_name]] <- test_predictions
}


```




####################################
## RB


```{r, warning=FALSE}

RB_pred <- final_result_RB %>%
  select(player_name, player_team, position, defteam)

for (target_var in target_variables) {
  # Create a formula for the linear regression model
  formula <- as.formula(paste(target_var, "~ ."))
  
  # Perform forward stepwise regression on selected_data
  model <- lm(formula, data = selected_data_RB)
  
  # Make predictions for the target variable
  test_predictions <- predict(model, newdata = final_result_RB)

  # Create a new column in merged_preds with the name pred_target_var
  pred_column_name <- paste("pred", target_var, sep = "_")
  RB_pred[[pred_column_name]] <- test_predictions
}


```


####################################
## WR

9
```{r, warning=FALSE}

WR_pred <- final_result_WR %>%
  select(player_name, player_team, position, defteam)

for (target_var in target_variables) {
  # Create a formula for the linear regression model
  formula <- as.formula(paste(target_var, "~ ."))
  
  # Perform forward stepwise regression on selected_data
  model <- lm(formula, data = selected_data_WR)
  
  # Make predictions for the target variable
  test_predictions <- predict(model, newdata = final_result_WR)

  # Create a new column in merged_preds with the name pred_target_var
  pred_column_name <- paste("pred", target_var, sep = "_")
  WR_pred[[pred_column_name]] <- test_predictions
}


```



####################################
## TE


```{r, warning=FALSE}

TE_pred <- final_result_TE %>%
  select(player_name, player_team, position, defteam)

for (target_var in target_variables) {
  # Create a formula for the linear regression model
  formula <- as.formula(paste(target_var, "~ ."))
  
  # Perform forward stepwise regression on selected_data
  model <- lm(formula, data = selected_data_TE)
  
  # Make predictions for the target variable
  test_predictions <- predict(model, newdata = final_result_TE)

  # Create a new column in merged_preds with the name pred_target_var
  pred_column_name <- paste("pred", target_var, sep = "_")
  TE_pred[[pred_column_name]] <- test_predictions
}


```



```{r}

QB_pred <- QB_pred %>%
  mutate(pred_fantasy_points = (.04*pred_passing_yards) + (4* pred_passing_tds) + (-2*pred_interceptions) + (2*pred_passing_2pt_conversions) + (.1*pred_rushing_yards) + (6*pred_rushing_tds) + (-2*pred_rushing_fumbles_lost) + (2*pred_rushing_2pt_conversions) + (.1*pred_receiving_yards) + (.5*pred_receptions) + (6*pred_receiving_tds) + (-2*pred_receiving_fumbles_lost) + (2*pred_receiving_2pt_conversions) + (-2*pred_sack_fumbles_lost))

RB_pred <- RB_pred %>%
  mutate(pred_fantasy_points = (.04*pred_passing_yards) + (4* pred_passing_tds) + (-2*pred_interceptions) + (2*pred_passing_2pt_conversions) + (.1*pred_rushing_yards) + (6*pred_rushing_tds) + (-2*pred_rushing_fumbles_lost) + (2*pred_rushing_2pt_conversions) + (.1*pred_receiving_yards) + (.5*pred_receptions) + (6*pred_receiving_tds) + (-2*pred_receiving_fumbles_lost) + (2*pred_receiving_2pt_conversions) + (-2*pred_sack_fumbles_lost))

WR_pred <- WR_pred %>%
  mutate(pred_fantasy_points = (.04*pred_passing_yards) + (4* pred_passing_tds) + (-2*pred_interceptions) + (2*pred_passing_2pt_conversions) + (.1*pred_rushing_yards) + (6*pred_rushing_tds) + (-2*pred_rushing_fumbles_lost) + (2*pred_rushing_2pt_conversions) + (.1*pred_receiving_yards) + (.5*pred_receptions) + (6*pred_receiving_tds) + (-2*pred_receiving_fumbles_lost) + (2*pred_receiving_2pt_conversions) + (-2*pred_sack_fumbles_lost))

TE_pred <- TE_pred %>%
  mutate(pred_fantasy_points = (.04*pred_passing_yards) + (4* pred_passing_tds) + (-2*pred_interceptions) + (2*pred_passing_2pt_conversions) + (.1*pred_rushing_yards) + (6*pred_rushing_tds) + (-2*pred_rushing_fumbles_lost) + (2*pred_rushing_2pt_conversions) + (.1*pred_receiving_yards) + (.5*pred_receptions) + (6*pred_receiving_tds) + (-2*pred_receiving_fumbles_lost) + (2*pred_receiving_2pt_conversions) + (-2*pred_sack_fumbles_lost))

```



# calculate RMSE
```{r, warning=FALSE, message=FALSE1}
library(Metrics)

QB_rmse = rmse(actual_QB$fan_points_half_ppr, QB_pred$pred_fantasy_points)
RB_rmse = rmse(actual_RB$fan_points_half_ppr, RB_pred$pred_fantasy_points)
WR_rmse = rmse(actual_WR$fan_points_half_ppr, WR_pred$pred_fantasy_points)
TE_rmse = rmse(actual_TE$fan_points_half_ppr, TE_pred$pred_fantasy_points)

print(cat("The QB RMSE is ", QB_rmse))

print(cat("The RB RMSE is ", RB_rmse))

print(cat("The WR RMSE is ", WR_rmse))

print(cat("The TE RMSE is ", TE_rmse))
```


```{r}

QB_pred_import <- QB_pred %>%
  arrange(desc(pred_fantasy_points)) %>%
  select(player_name, position, pred_passing_yards, pred_passing_tds, pred_rushing_yards, pred_rushing_tds, pred_receiving_yards,pred_receiving_tds, pred_fantasy_points) %>%
  head()

RB_pred_import <- RB_pred %>%
  arrange(desc(pred_fantasy_points)) %>%
  select(player_name, position, pred_passing_yards, pred_passing_tds, pred_rushing_yards, pred_rushing_tds, pred_receiving_yards,pred_receiving_tds, pred_fantasy_points) %>%
  head()

WR_pred_import <- WR_pred %>%
  arrange(desc(pred_fantasy_points)) %>%
  select(player_name, position, pred_passing_yards, pred_passing_tds, pred_rushing_yards, pred_rushing_tds, pred_receiving_yards,pred_receiving_tds, pred_fantasy_points) %>%
  head()

TE_pred_import <- TE_pred %>%
  arrange(desc(pred_fantasy_points)) %>%
  select(player_name, position, pred_passing_yards, pred_passing_tds, pred_rushing_yards, pred_rushing_tds, pred_receiving_yards,pred_receiving_tds, pred_fantasy_points) %>%
  head()

```


```{r}

full_pred_fan_points <- rbind(QB_pred_import, RB_pred_import, WR_pred_import, TE_pred_import) %>%
  select(player_name, position, pred_fantasy_points)

# Create a box plot to compare distributions by position
ggplot(full_pred_fan_points, aes(x = position, y = pred_fantasy_points)) +
  geom_boxplot() +
  labs(title = "Distribution of Fantasy Points by Position", y = "Fantasy Points")

ggplot(full_pred_fan_points, aes(x = pred_fantasy_points, fill = position)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of Fantasy Points by Position", x = "Fantasy Points") +
  scale_fill_manual(values = c("QB" = "red", "RB" = "blue", "WR" = "green", "TE" = "purple"))

```
